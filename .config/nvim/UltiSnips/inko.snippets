snippet object "Inserts an object definition"
object ${1:name} {
	$0
}
endsnippet

snippet trait "Inserts a trait definition"
trait ${1:name} {
	$0
}
endsnippet

snippet def "Inserts a method definition"
def ${1:name} {
	$0
}
endsnippet

snippet def! "Inserts a method that will throw"
def ${1:name} !! ${2:Error} {
	$0
}
endsnippet

snippet impl "Inserts an object implementation block"
impl ${1:object} {
	$0
}
endsnippet

snippet do "Inserts a closure"
do ($1) {
	$0
}
endsnippet

snippet lambda "Inserts a lambda"
lambda ($1) {
	$0
}
endsnippet

snippet let "Inserts a let binding"
let ${1:variable} = $2
endsnippet

snippet letm "Inserts a mutable let binding"
let mut ${1:variable} = $2
endsnippet

snippet if "Inserts an if message"
.if true: {
	$1
}, false: {
	$2
}$0
endsnippet

snippet if_true "Inserts an if_true message"
.if_true {
	$1
}$0
endsnippet

snippet if_false "Inserts an if_false message"
.if_false {
	$1
}$0
endsnippet

snippet while "Inserts a while_true message"
{ ${1:condition} }.while_true {
	$0
}
endsnippet

snippet and "Inserts an and message"
.and { $1 }$0
endsnippet

snippet or "Inserts an or message"
.or { $1 }$0
endsnippet

snippet tmod "Inserts code for writing unit tests"
import std::test
import std::test::assert

test.group('${1:group name}') do (g) {
	g.test('${2:test name}') {
		$0
	}
}
endsnippet

snippet test "Inserts a test block"
g.test('${1:Test name}') {
	$0
}
endsnippet

snippet tgroup "Insert a test group block"
test.group('${1:Group name}') do (g) {
	$0
}
endsnippet

snippet aeq "Inserts an assert.equal call"
assert.equal(${1:given}, ${2:expected})
endsnippet

snippet aneq "Inserts an assert.not_equal call"
assert.not_equal(${1:given}, ${2:expected})
endsnippet

snippet apanic "Inserts an assert.panic call"
assert.panic {
	${0}
}
endsnippet

snippet anpanic "Inserts an assert.no_panic call"
assert.no_panic {
	${0}
}
endsnippet
