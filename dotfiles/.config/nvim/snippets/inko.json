{
    "def": {
        "description": "Inserts a method definition",
        "body": [
            "def ${1:name} {",
            "\t$0",
            "}"
        ],
        "prefix": [
            "def"
        ]
    },
    "aneq": {
        "description": "Inserts an assert.not_equal call",
        "body": [
            "try assert_not_equal(${1:given}, ${2:expected})"
        ],
        "prefix": [
            "aneq"
        ]
    },
    "set": {
        "description": "Inserts a setter method",
        "body": [
            "def ${1:name}=(value: ${2:Type}) -> $2 {",
            "\t@$1 = value",
            "}$0"
        ],
        "prefix": [
            "set"
        ]
    },
    ".if": {
        "description": "Inserts an if message",
        "body": [
            ".if(true: { $1 }, false: { $2 })"
        ],
        "prefix": [
            ".if"
        ]
    },
    "aeq": {
        "description": "Inserts an assert.equal call",
        "body": [
            "try assert_equal(${1:given}, ${2:expected})"
        ],
        "prefix": [
            "aeq"
        ]
    },
    "test": {
        "description": "Inserts a test block",
        "body": [
            "g.test('${1:Test name}') {",
            "\t$0",
            "}"
        ],
        "prefix": [
            "test"
        ]
    },
    "tgroup": {
        "description": "Insert a test group block",
        "body": [
            "t.group('${1:Group name}') do (g) {",
            "\t$0",
            "}"
        ],
        "prefix": [
            "tgroup"
        ]
    },
    "get": {
        "description": "Inserts a getter method",
        "body": [
            "def ${1:name} -> ${2:Type} {",
            "\t@$1",
            "}$0"
        ],
        "prefix": [
            "get"
        ]
    },
    "do": {
        "description": "Inserts a closure",
        "body": [
            "do ($1) {",
            "\t$0",
            "}"
        ],
        "prefix": [
            "do"
        ]
    },
    "bif": {
        "description": "Inserts a binary if_false",
        "body": [
            "(${1:expression}).if_false { $0 }"
        ],
        "prefix": [
            "bif"
        ]
    },
    "impl": {
        "description": "Inserts an object implementation block",
        "body": [
            "impl ${1:object} {",
            "\t$0",
            "}"
        ],
        "prefix": [
            "impl"
        ]
    },
    ".if_true": {
        "description": "Inserts an if_true message",
        "body": [
            ".if_true { $1 }"
        ],
        "prefix": [
            ".if_true"
        ]
    },
    "tmod": {
        "description": "Inserts code for writing unit tests",
        "body": [
            "import std::test::*",
            "",
            "def tests(t: Tests) {",
            "\tt.group('${1:group name}') do (g) {",
            "\t\tg.test('${2:test name}') {",
            "\t\t\t$0",
            "\t\t}",
            "\t}",
            "}"
        ],
        "prefix": [
            "tmod"
        ]
    },
    "ary": {
        "description": "Inserts a new Array",
        "body": [
            "Array.new"
        ],
        "prefix": [
            "ary"
        ]
    },
    "lambda": {
        "description": "Inserts a lambda",
        "body": [
            "fn ($1) {",
            "\t$0",
            "}"
        ],
        "prefix": [
            "lambda"
        ]
    },
    "bit": {
        "description": "Inserts a binary if_true",
        "body": [
            "(${1:expression}).if_true { $0 }"
        ],
        "prefix": [
            "bit"
        ]
    },
    ".if_false": {
        "description": "Inserts an if_false message",
        "body": [
            ".if_false { $1 }"
        ],
        "prefix": [
            ".if_false"
        ]
    },
    "trait": {
        "description": "Inserts a trait definition",
        "body": [
            "trait ${1:name} {",
            "\t$0",
            "}"
        ],
        "prefix": [
            "trait"
        ]
    },
    ".and": {
        "description": "Inserts an and message",
        "body": [
            ".and { $1 }$0"
        ],
        "prefix": [
            ".and"
        ]
    },
    "class": {
        "description": "Inserts a class definition",
        "body": [
            "class ${1:name} {",
            "\t$0",
            "}"
        ],
        "prefix": [
            "class"
        ]
    },
    ".or": {
        "description": "Inserts an or message",
        "body": [
            ".or { $1 }$0"
        ],
        "prefix": [
            ".or"
        ]
    }
}
