# Collection of various Ruby snippets.

snippet #! "Inserts a Ruby shebang"
#!/usr/bin/env ruby
endsnippet

# Debugging snippets.

snippet pry_binding "Inserts a Pry binding"
require 'pry'; binding.pry
endsnippet

snippet pry_daemon "Inserts a Pry binding for daemons"
STDIN.reopen('/dev/tty'); require 'pry'; binding.pry
endsnippet

snippet def "Inserts a new method"
# ${2:Description of this method.}
def ${1:method_name}
	${0}
end
endsnippet

snippet class "Inserts a new class"
# ${2:Class description}
class ${1:name}
	${0}
end
endsnippet

snippet module "Inserts a new module"
module ${1:name}
	${0}
end
endsnippet

snippet do "Inserts a do/end block"
do
	${0}
end
endsnippet

snippet doa "Inserts a do/end block with arguments"
do |${1}|
	${0}
end
endsnippet

snippet if "Inserts an if statement"
if ${1:statement}
	${0}
end
endsnippet

snippet before "Inserts a before block"
before do
	${1}
end${0}
endsnippet

snippet it "Inserts an RSpec it block"
it '${1:description}' do
	${0}
end
endsnippet

snippet describe "Inserts an RSpec describe block"
describe '${1:description}' do
	${0}
end
endsnippet

snippet context "Inserts an RSpec context block"
context '${1:description}' do
	${0}
end
endsnippet

snippet gemspec "Inserts a new Gem specification"
require File.expand_path('../lib/${1:name}/version', __FILE__)

Gem::Specification.new do |gem|
	gem.name        = '$1'
	gem.version     = ${2:version}
	gem.authors     = ['Yorick Peterse']
	gem.email       = 'yorick@yorickpeterse.com'
	gem.summary     = '${3:description}'
	gem.homepage    = 'https://gitlab.com/yorickpeterse/$1/'
	gem.description = gem.summary
	gem.executables = []
	gem.license     = 'MPL-2.0'

	gem.files = Dir.glob([
		'${2}',${0}
	]).select { |file| File.file?(file) }
end
endsnippet

snippet @param "Inserts a new YARDOC parameter tag"
@param [${1:type}] ${2:name} ${3:description}
endsnippet

snippet @return "Inserts a new YARDOC return tag"
@return [${1:type}]
endsnippet

snippet fst "Adds a frozen string literal comment"
# frozen_string_literal: true


endsnippet

snippet rspec "Inserts an RSpec test"
# frozen_string_literal: true

require 'spec_helper'

describe ${1:ClassName} do
	describe '${2:method name}' do
		$0
	end
end
endsnippet

snippet aeq "Inserts an equality expectation"
expect(${1:expression}).to eq(${2})
endsnippet
