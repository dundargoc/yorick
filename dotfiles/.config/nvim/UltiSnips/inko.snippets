snippet class "Inserts a class definition"
class ${1:name} {
	$0
}
endsnippet

snippet trait "Inserts a trait definition"
trait ${1:name} {
	$0
}
endsnippet

snippet def "Inserts a method definition"
def ${1:name} {
	$0
}
endsnippet

snippet impl "Inserts an object implementation block"
impl ${1:object} {
	$0
}
endsnippet

snippet do "Inserts a closure"
do ($1) {
	$0
}
endsnippet

snippet lambda "Inserts a lambda"
fn ($1) {
	$0
}
endsnippet

snippet .if "Inserts an if message" i
.if(true: { $1 }, false: { $2 })
endsnippet

snippet .if_true "Inserts an if_true message" i
.if_true { $1 }
endsnippet

snippet .if_false "Inserts an if_false message" i
.if_false { $1 }
endsnippet

snippet bit "Inserts a binary if_true"
(${1:expression}).if_true { $0 }
endsnippet

snippet bif "Inserts a binary if_false"
(${1:expression}).if_false { $0 }
endsnippet

snippet .and "Inserts an and message" i
.and { $1 }$0
endsnippet

snippet .or "Inserts an or message" i
.or { $1 }$0
endsnippet

snippet tmod "Inserts code for writing unit tests"
import std::test::*

def tests(t: Tests) {
	t.group('${1:group name}') do (g) {
		g.test('${2:test name}') {
			$0
		}
	}
}
endsnippet

snippet test "Inserts a test block"
g.test('${1:Test name}') {
	$0
}
endsnippet

snippet tgroup "Insert a test group block"
t.group('${1:Group name}') do (g) {
	$0
}
endsnippet

snippet aeq "Inserts an assert.equal call"
try assert_equal(${1:given}, ${2:expected})
endsnippet

snippet aneq "Inserts an assert.not_equal call"
try assert_not_equal(${1:given}, ${2:expected})
endsnippet

snippet ary "Inserts a new Array"
Array.new
endsnippet

snippet get "Inserts a getter method"
def ${1:name} -> ${2:Type} {
	@$1
}$0
endsnippet

snippet set "Inserts a setter method"
def ${1:name}=(value: ${2:Type}) -> $2 {
	@$1 = value
}$0
endsnippet
